generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int          @id @default(autoincrement())
  email      String       @unique
  username   String       @unique
  password   String
  intensif   Boolean      @default(false)
  createdAt  DateTime     @default(now())
  getAccess  Boolean      @default(false)
  userCourse userCourse[]
  userLesson userLesson[]
}

model Course {
  id          Int          @id @default(autoincrement())
  title       String
  description String
  codeCourse  String       @unique
  countCourse Int
  createdAt   DateTime     @default(now())
  Lesson      Lesson[]
  userCourse  userCourse[]
  userLesson  userLesson[]
}

model Lesson {
  id_lesson  Int          @id @default(autoincrement())
  title      String
  codeLesson String       @unique
  link_ppt   String?
  link_video String?
  link_quiz  String?
  openLesson Boolean      @default(false)
  id_course  Int
  createdAt  DateTime     @default(now())
  course     Course       @relation(fields: [id_course], references: [id])
  userLesson userLesson[]

  @@unique([id_course, id_lesson])
}

model userCourse {
  id         Int      @id @default(autoincrement())
  id_user    Int
  id_course  Int
  percentage Int      @default(0)
  createdAt  DateTime @default(now())
  course     Course   @relation(fields: [id_course], references: [id])
  user       User     @relation(fields: [id_user], references: [id])

  @@unique([id_user, id_course])
  @@index([id_course], map: "userCourse_id_course_fkey")
}

model userLesson {
  id        Int      @id @default(autoincrement())
  id_user   Int
  id_lesson Int
  id_course Int
  isDone    Boolean  @default(false)
  createdAt DateTime @default(now())
  Course    Course   @relation(fields: [id_course], references: [id], onUpdate: Restrict, map: "userLesson_ibfk_1")
  lesson    Lesson   @relation(fields: [id_lesson], references: [id_lesson])
  user      User     @relation(fields: [id_user], references: [id])

  @@unique([id_user, id_lesson, id_course])
  @@index([id_lesson], map: "userLesson_id_lesson_fkey")
  @@index([id_course], map: "userLesson_id_course_fkey")
}

model updateInfo {
  id             Int      @id @default(autoincrement())
  id_course      Int      @unique(map: "updateInfo_id_course_fkey")
  commit_message String   @db.Text
  admin          String   @db.Text
  createdAt      DateTime @default(now()) @db.Date
  link           String   @db.Text
}

model Material {
  id_material    Int              @id @default(autoincrement())
  name_material  String           @db.Text
  countQuestion  Int
  id_tryout      Int
  time           Int
  createdAt      DateTime         @default(now()) @db.Date
  Tryout         Tryout           @relation(fields: [id_tryout], references: [id_tryout], onUpdate: Restrict, map: "material_id_tryout_fkey")
  Questions      Questions?
  userTOMaterial userTOMaterial[]

  @@unique([id_tryout, id_material], map: "material_id_tryout_key")
  @@index([id_tryout], map: "material_id_tryout_fkey")
}

model Tryout {
  id_tryout     Int        @id @default(autoincrement())
  name          String     @db.Text
  start_date    DateTime   @db.Date
  end_date      DateTime   @db.Date
  createdAt     DateTime   @default(now()) @db.Date
  countMaterial Int
  isMiniTO      Boolean    @default(false)
  Material      Material[]
  userTO        userTO[]
}

model Voucher {
  id_voucher   Int      @id @default(autoincrement())
  id_tryout    Int
  kode_voucher String   @db.Text
  expired      DateTime @db.Date
  maxUsage     Int
  createdAt    DateTime @default(now()) @db.Date

  @@index([id_tryout], map: "voucher_id_tryout_fkey")
}

model userResult {
  id_result Int      @id @default(autoincrement())
  id_user   Int
  id_tryout Int
  resultTO  Int
  createdAt DateTime @default(now()) @db.Date

  @@unique([id_user, id_tryout], map: "userResult_id_user_id_tryout_fkey")
}

model userTO {
  id_userTO      Int              @id @default(autoincrement())
  id_user        Int
  id_tryout      Int
  resultTO       Int
  isCompleted    Boolean          @default(false)
  createdAt      DateTime         @default(now()) @db.Date
  Tryout         Tryout           @relation(fields: [id_tryout], references: [id_tryout], onUpdate: Restrict)
  userTOMaterial userTOMaterial[]

  @@unique([id_user, id_tryout], map: "userTO_id_user_id_voucher_id_tryout_id_material_fkey")
  @@index([id_tryout], map: "userTO_id_tryout_fkey")
}

model userVoucher {
  id_userVoucher Int @id @default(autoincrement())
  id_user        Int
  id_voucher     Int
  created_at     Int @default(dbgenerated("(current_timestamp())"))

  @@unique([id_user, id_voucher], map: "userVoucher_id_user_id_voucher_fkey")
}

model userTOMaterial {
  id_userTOMaterial Int      @id @unique(map: "userTOmaterial_id_material_id_userTO_key") @default(autoincrement())
  id_userTO         Int
  id_material       Int
  nilaiMaterial     Int
  createdAt         Int?     @default(dbgenerated("(current_timestamp())"))
  Material          Material @relation(fields: [id_material], references: [id_material], onUpdate: Restrict, map: "userTOmaterial_id_material_fkey")
  userTO            userTO   @relation(fields: [id_userTO], references: [id_userTO], onUpdate: Restrict, map: "userTOmaterial_id_userTO_fkey")

  @@index([id_material], map: "userTOmaterial_id_material_fkey")
  @@index([id_userTO], map: "userTOmaterial_id_userTO_fkey")
}

model Questions {
  id_soal     Int      @id @default(autoincrement())
  soal        String   @db.Text
  gambar      String   @db.Text
  id_material Int      @unique(map: "answer_id_material_fkey")
  createdAt   DateTime @default(now()) @db.Date
  Material    Material @relation(fields: [id_material], references: [id_material], onUpdate: Restrict, map: "questions_id_material_fkey")
}
